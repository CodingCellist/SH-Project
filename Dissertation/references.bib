@inproceedings{Brady:2011:ISP:1929529.1929536,
    author      = {Brady, Edwin C.},
    title       = {IDRIS ---: Systems Programming Meets Full Dependent Types},
    booktitle   = {Proceedings of the 5th ACM Workshop on Programming Languages Meets Program Verification},
    series      = {PLPV '11},
    year        = {2011},
    isbn        = {978-1-4503-0487-0},
    location    = {Austin, Texas, USA},
    pages       = {43--54},
    numpages    = {12},
    url         = {http://doi.acm.org/10.1145/1929529.1929536},
    doi         = {10.1145/1929529.1929536},
    acmid       = {1929536},
    publisher   = {ACM},
    address     = {New York, NY, USA},
    keywords    = {data description, dependent types}
}

@article{brady2015embedded,
    title       = {Embedded Domain Specific Languages in Idris},
    author      = {Brady, Edwin},
    year        = {2015}
}

@inproceedings{10.1007/978-3-642-27694-1_18,
    author      = {Brady, Edwin
    and Hammond, Kevin},
    editor      = {Russo, Claudio
    and Zhou, Neng-Fa},
    title       = {Resource-Safe Systems Programming with Embedded Domain Specific Languages},
    booktitle   = {Practical Aspects of Declarative Languages},
    year        = {2012},
    publisher   = {Springer Berlin Heidelberg},
    address     = {Berlin, Heidelberg},
    pages       = {242--257},
    abstract    = {We introduce a new overloading notation that facilitates programming, modularity and reuse in Embedded Domain Specific Languages (EDSLs), and use it to reason about safe resource usage and state management. We separate the structural language constructs from our primitive operations, and show how precisely-typed functions can be lifted into the EDSL. In this way, we implement a generic framework for constructing state-aware EDSLs for systems programming.},
    isbn        = {978-3-642-27694-1}
}

@inproceedings{10.1007/978-3-540-39815-8_3,
    author      = {Hammond, Kevin and Michaelson, Greg},
    editor      = {Pfenning, Frank and Smaragdakis, Yannis},
    title       = {Hume: A Domain-Specific Language for Real-Time Embedded Systems},
    booktitle   = {Generative Programming and Component Engineering},
    year        = {2003},
    publisher   = {Springer Berlin Heidelberg},
    address     = {Berlin, Heidelberg},
    pages       = {37--56},
    abstract    = {This paper describes Hume: a novel domain-specific language whose purpose is to explore the expressibility/costability spectrum in resource-constrained systems, such as real-time embedded or control systems. Hume provides a number of high level features including higher-order functions, polymorphic types, arbitrary but sized user-defined data structures, asynchronous processes, lightweight exception handling, automatic memory management and domain-specific metaprogramming features, whilst seeking to guarantee strong space/time behaviour and maintaining overall determinacy.},
    isbn        = {978-3-540-39815-8}
}

@inproceedings{5558637,
    author      = {E. {Axelsson} and K. {Claessen} and G. {Dévai} and Z. {Horváth} and K. {Keijzer} and B. {Lyckegård} and A. {Persson} and M. {Sheeran} and J. {Svenningsson} and A. {Vajdax}},
    booktitle   = {Eighth ACM/IEEE International Conference on Formal Methods and Models for Codesign (MEMOCODE 2010)},
    title       = {Feldspar: A domain specific language for digital signal processing algorithms},
    year        = {2010},
    volume      = {},
    number      = {},
    pages       = {169-178},
    keywords    = {data flow analysis;functional languages;machine oriented languages;optimisation;signal processing;Feldspar;domain specific language;digital signal processing;functional language;high-level dataflow;high-level optimization;vector fusion;machine-oriented languages;Indexes;Digital signal processing;Generators;Optimization;Kernel;Arrays;DSL},
    doi         = {10.1109/MEMCOD.2010.5558637},
    ISSN        = {},
    month       = {July}
}

@inproceedings{5158855,
    author      = {S. {Bhatti} and E. {Brady} and K. {Hammond} and J. {McKinna}},
    booktitle   = {2009 29th IEEE International Conference on Distributed Computing Systems Workshops},
    title       = {Domain Specific Languages (DSLs) for Network Protocols (Position Paper)},
    year        = {2009},
    volume      = {},
    number      = {},
    pages       = {208-213},
    keywords    = {program testing;protocols;specification languages;domain specific languages;network protocols;next generation network architectures;inline testing;programming language design;correct-by-construction design;programming language support;Domain specific languages;DSL;Routing protocols;Next generation networking;System testing;Mobile communication;Functional programming;Computer languages;Wireless application protocol;Sockets},
    doi         = {10.1109/ICDCSW.2009.64},
    ISSN        = {1545-0678},
    month       = {June}
}

@article{brady2010correct,
    title       = {Correct-by-construction concurrency: Using dependent types to verify implementations of effectful resource usage protocols},
    author      = {Brady, Edwin and Hammond, Kevin},
    journal     = {Fundamenta Informaticae},
    volume      = {102},
    number      = {2},
    pages       = {145--176},
    year        = {2010},
    publisher   = {IOS Press}
}


@inproceedings{10.1007/3-540-45350-4_5,
    author      = {Elliott, Conal and Finne, Sigbj{\o}rn and de Moor, Oege},
    editor      = {Taha, Walid},
    title       = {Compiling Embedded Languages},
    booktitle   = {Semantics, Applications, and Implementation of Program Generation},
    year        = {2000},
    publisher   = {Springer Berlin Heidelberg},
    address     = {Berlin, Heidelberg},
    pages       = {9--26},
    abstract    = {Functional languages are particularly well-suited to the im- plementation of interpreters for domain-specific embedded languages (DSELs). We describe an implemented technique for producing optimiz- ing compilers for DSELs, based on Kamin's idea of DSELs for program generation. The technique uses a data type of syntax for basic types, a set of smart constructors that perform rewriting over those types, some code motion transformations, and a back-end code generator. Domain- specific optimization results from chains of rewrites on basic types. New DSELs are defined directly in terms of the basic syntactic types, plus host language functions and tuples. This definition style makes compil- ers easy to write and, in fact, almost identical to the simplest embedded interpreters. We illustrate this technique with a language Pan for the computationally intensive domain of image synthesis and manipulation.},
    isbn        = {978-3-540-45350-5}
}

@inproceedings{Chapman:2006:CCM:1151816.1151820,
    author      = {Chapman, Roderick},
    title       = {Correctness by Construction: A Manifesto for High Integrity Software},
    booktitle   = {Proceedings of the 10th Australian Workshop on Safety Critical Systems and Software - Volume 55},
    series      = {SCS '05},
    year        = {2006},
    isbn        = {1-920-68237-6},
    location    = {Sydney, Australia},
    pages       = {43--46},
    numpages    = {4},
    url         = {http://dl.acm.org/citation.cfm?id=1151816.1151820},
    acmid       = {1151820},
    publisher   = {Australian Computer Society, Inc.},
    address     = {Darlinghurst, Australia, Australia},
    keywords    = {SPARK, correctness-by-construction, safety-critical, security-critical, software engineering}
}

@inproceedings{685738,
    author      = {P. {Hudak}},
    booktitle   = {Proceedings. Fifth International Conference on Software Reuse (Cat. No.98TB100203)},
    title       = {Modular domain specific languages and tools},
    year        = {1998},
    volume      = {},
    number      = {},
    pages       = {134-142},
    keywords    = {functional languages;software tools;software reusability;program interpreters;modular domain specific languages;software tools;software maintenance;program understanding;methodology;domain specific embedded languages;higher-order typed programming language;Haskell;ML;modular interpreters;semantics;implementation code;software reuse;functional languages;syntax;Domain specific languages;DSL;Application software;Computer languages;Costs;Programming;Buildings;Hardware;Computer science;Software maintenance},
    doi         = {10.1109/ICSR.1998.685738},
    ISSN        = {1085-9098},
    month       = {June}
}

@article{hudak1996building,
    title       = {Building domain-specific embedded languages},
    author      = {Hudak, Paul and others},
    journal     = {ACM Comput. Surv.},
    volume      = {28},
    number      = {4es},
    pages       = {196},
    year        = {1996},
    publisher   = {Citeseer},
    doi         = {10.1.1.49.6020}
}


@online{cisco-whitepaper,
	author		= {Dave Evans},
	title		= {The Internet of Things},
	url			= {https://www.cisco.com/c/dam/en_us/about/ac79/docs/innov/IoT_IBSG_0411FINAL.pdf},
	subtitle 	= {How the Next Evolution of the Internet Is Changing Everything},
	note 		= {[Online; Accessed March 2019]},
	organization = {Cisco},
	month 		= {April},
	year 		= {2011}
}

@report{teamplay:d1.1,
	author 		= {Chris Brown},
	title 		= {Report on Code-Level Contracts for Energy, Time and Security},
	type 		= {Deliverable},
	institution = {University of St Andrews},
	date 		= {1 January 2018},
	note 		= {[Online; Accessed Mar 2019]},
	url 		= {https://gitlab.inria.fr/TeamPlay_Public/TeamPlay_Public_Deliverables/blob/master/D1.1.pdf}
}

@article{brady_2013,
	title		= {Idris, a general-purpose dependently typed programming language: Design and implementation},
	volume		= {23},
	doi			= {10.1017/S095679681300018X},
	number		= {5},
	journal		= {Journal of Functional Programming},
	publisher	= {Cambridge University Press},
	author		= {Brady, Edwin},
	year		= {2013},
	pages		= {552–593}
}
